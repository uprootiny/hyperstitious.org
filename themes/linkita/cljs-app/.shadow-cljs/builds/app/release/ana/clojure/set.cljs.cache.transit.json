["^ ","~:output",["^ ","~:js","goog.provide('clojure.set');\nclojure.set.bubble_max_key = (function clojure$set$bubble_max_key(k,coll){\n\nvar max = cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.max_key,k,coll);\nreturn cljs.core.cons(max,cljs.core.remove.cljs$core$IFn$_invoke$arity$2((function (p1__7860_SHARP_){\nreturn (max === p1__7860_SHARP_);\n}),coll));\n});\n/**\n * Return a set that is the union of the input sets\n */\nclojure.set.union = (function clojure$set$union(var_args){\nvar G__7865 = arguments.length;\nswitch (G__7865) {\ncase 0:\nreturn clojure.set.union.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ncase 1:\nreturn clojure.set.union.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn clojure.set.union.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nvar args_arr__5774__auto__ = [];\nvar len__5749__auto___7954 = arguments.length;\nvar i__5750__auto___7955 = (0);\nwhile(true){\nif((i__5750__auto___7955 < len__5749__auto___7954)){\nargs_arr__5774__auto__.push((arguments[i__5750__auto___7955]));\n\nvar G__7956 = (i__5750__auto___7955 + (1));\ni__5750__auto___7955 = G__7956;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__5775__auto__ = ((((2) < args_arr__5774__auto__.length))?(new cljs.core.IndexedSeq(args_arr__5774__auto__.slice((2)),(0),null)):null);\nreturn clojure.set.union.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__5775__auto__);\n\n}\n});\n\n(clojure.set.union.cljs$core$IFn$_invoke$arity$0 = (function (){\nreturn cljs.core.PersistentHashSet.EMPTY;\n}));\n\n(clojure.set.union.cljs$core$IFn$_invoke$arity$1 = (function (s1){\nreturn s1;\n}));\n\n(clojure.set.union.cljs$core$IFn$_invoke$arity$2 = (function (s1,s2){\nif((cljs.core.count(s1) < cljs.core.count(s2))){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj,s2,s1);\n} else {\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj,s1,s2);\n}\n}));\n\n(clojure.set.union.cljs$core$IFn$_invoke$arity$variadic = (function (s1,s2,sets){\nvar bubbled_sets = clojure.set.bubble_max_key(cljs.core.count,cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(sets,s2,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([s1], 0)));\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.into,cljs.core.first(bubbled_sets),cljs.core.rest(bubbled_sets));\n}));\n\n/** @this {Function} */\n(clojure.set.union.cljs$lang$applyTo = (function (seq7862){\nvar G__7863 = cljs.core.first(seq7862);\nvar seq7862__$1 = cljs.core.next(seq7862);\nvar G__7864 = cljs.core.first(seq7862__$1);\nvar seq7862__$2 = cljs.core.next(seq7862__$1);\nvar self__5734__auto__ = this;\nreturn self__5734__auto__.cljs$core$IFn$_invoke$arity$variadic(G__7863,G__7864,seq7862__$2);\n}));\n\n(clojure.set.union.cljs$lang$maxFixedArity = (2));\n\n/**\n * Return a set that is the intersection of the input sets\n */\nclojure.set.intersection = (function clojure$set$intersection(var_args){\nvar G__7871 = arguments.length;\nswitch (G__7871) {\ncase 1:\nreturn clojure.set.intersection.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn clojure.set.intersection.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nvar args_arr__5774__auto__ = [];\nvar len__5749__auto___7958 = arguments.length;\nvar i__5750__auto___7959 = (0);\nwhile(true){\nif((i__5750__auto___7959 < len__5749__auto___7958)){\nargs_arr__5774__auto__.push((arguments[i__5750__auto___7959]));\n\nvar G__7960 = (i__5750__auto___7959 + (1));\ni__5750__auto___7959 = G__7960;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__5775__auto__ = ((((2) < args_arr__5774__auto__.length))?(new cljs.core.IndexedSeq(args_arr__5774__auto__.slice((2)),(0),null)):null);\nreturn clojure.set.intersection.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__5775__auto__);\n\n}\n});\n\n(clojure.set.intersection.cljs$core$IFn$_invoke$arity$1 = (function (s1){\nreturn s1;\n}));\n\n(clojure.set.intersection.cljs$core$IFn$_invoke$arity$2 = (function (s1,s2){\nwhile(true){\nif((cljs.core.count(s2) < cljs.core.count(s1))){\nvar G__7961 = s2;\nvar G__7962 = s1;\ns1 = G__7961;\ns2 = G__7962;\ncontinue;\n} else {\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (s1,s2){\nreturn (function (result,item){\nif(cljs.core.contains_QMARK_(s2,item)){\nreturn result;\n} else {\nreturn cljs.core.disj.cljs$core$IFn$_invoke$arity$2(result,item);\n}\n});})(s1,s2))\n,s1,s1);\n}\nbreak;\n}\n}));\n\n(clojure.set.intersection.cljs$core$IFn$_invoke$arity$variadic = (function (s1,s2,sets){\nvar bubbled_sets = clojure.set.bubble_max_key((function (p1__7866_SHARP_){\nreturn (- cljs.core.count(p1__7866_SHARP_));\n}),cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(sets,s2,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([s1], 0)));\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(clojure.set.intersection,cljs.core.first(bubbled_sets),cljs.core.rest(bubbled_sets));\n}));\n\n/** @this {Function} */\n(clojure.set.intersection.cljs$lang$applyTo = (function (seq7868){\nvar G__7869 = cljs.core.first(seq7868);\nvar seq7868__$1 = cljs.core.next(seq7868);\nvar G__7870 = cljs.core.first(seq7868__$1);\nvar seq7868__$2 = cljs.core.next(seq7868__$1);\nvar self__5734__auto__ = this;\nreturn self__5734__auto__.cljs$core$IFn$_invoke$arity$variadic(G__7869,G__7870,seq7868__$2);\n}));\n\n(clojure.set.intersection.cljs$lang$maxFixedArity = (2));\n\n/**\n * Return a set that is the first set without elements of the remaining sets\n */\nclojure.set.difference = (function clojure$set$difference(var_args){\nvar G__7882 = arguments.length;\nswitch (G__7882) {\ncase 1:\nreturn clojure.set.difference.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn clojure.set.difference.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nvar args_arr__5774__auto__ = [];\nvar len__5749__auto___7971 = arguments.length;\nvar i__5750__auto___7972 = (0);\nwhile(true){\nif((i__5750__auto___7972 < len__5749__auto___7971)){\nargs_arr__5774__auto__.push((arguments[i__5750__auto___7972]));\n\nvar G__7973 = (i__5750__auto___7972 + (1));\ni__5750__auto___7972 = G__7973;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__5775__auto__ = ((((2) < args_arr__5774__auto__.length))?(new cljs.core.IndexedSeq(args_arr__5774__auto__.slice((2)),(0),null)):null);\nreturn clojure.set.difference.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__5775__auto__);\n\n}\n});\n\n(clojure.set.difference.cljs$core$IFn$_invoke$arity$1 = (function (s1){\nreturn s1;\n}));\n\n(clojure.set.difference.cljs$core$IFn$_invoke$arity$2 = (function (s1,s2){\nif((cljs.core.count(s1) < cljs.core.count(s2))){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (result,item){\nif(cljs.core.contains_QMARK_(s2,item)){\nreturn cljs.core.disj.cljs$core$IFn$_invoke$arity$2(result,item);\n} else {\nreturn result;\n}\n}),s1,s1);\n} else {\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.disj,s1,s2);\n}\n}));\n\n(clojure.set.difference.cljs$core$IFn$_invoke$arity$variadic = (function (s1,s2,sets){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(clojure.set.difference,s1,cljs.core.conj.cljs$core$IFn$_invoke$arity$2(sets,s2));\n}));\n\n/** @this {Function} */\n(clojure.set.difference.cljs$lang$applyTo = (function (seq7878){\nvar G__7879 = cljs.core.first(seq7878);\nvar seq7878__$1 = cljs.core.next(seq7878);\nvar G__7880 = cljs.core.first(seq7878__$1);\nvar seq7878__$2 = cljs.core.next(seq7878__$1);\nvar self__5734__auto__ = this;\nreturn self__5734__auto__.cljs$core$IFn$_invoke$arity$variadic(G__7879,G__7880,seq7878__$2);\n}));\n\n(clojure.set.difference.cljs$lang$maxFixedArity = (2));\n\n/**\n * Returns a set of the elements for which pred is true\n */\nclojure.set.select = (function clojure$set$select(pred,xset){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (s,k){\nif(cljs.core.truth_((pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(k) : pred.call(null,k)))){\nreturn s;\n} else {\nreturn cljs.core.disj.cljs$core$IFn$_invoke$arity$2(s,k);\n}\n}),xset,xset);\n});\n/**\n * Returns a rel of the elements of xrel with only the keys in ks\n */\nclojure.set.project = (function clojure$set$project(xrel,ks){\nreturn cljs.core.set(cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__7885_SHARP_){\nreturn cljs.core.select_keys(p1__7885_SHARP_,ks);\n}),xrel));\n});\n/**\n * Returns the map with the keys in kmap renamed to the vals in kmap\n */\nclojure.set.rename_keys = (function clojure$set$rename_keys(map,kmap){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (m,p__7886){\nvar vec__7887 = p__7886;\nvar old = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__7887,(0),null);\nvar new$ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__7887,(1),null);\nif(cljs.core.contains_QMARK_(map,old)){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m,new$,cljs.core.get.cljs$core$IFn$_invoke$arity$2(map,old));\n} else {\nreturn m;\n}\n}),cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.dissoc,map,cljs.core.keys(kmap)),kmap);\n});\n/**\n * Returns a rel of the maps in xrel with the keys in kmap renamed to the vals in kmap\n */\nclojure.set.rename = (function clojure$set$rename(xrel,kmap){\nreturn cljs.core.set(cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__7890_SHARP_){\nreturn clojure.set.rename_keys(p1__7890_SHARP_,kmap);\n}),xrel));\n});\n/**\n * Returns a map of the distinct values of ks in the xrel mapped to a\n *   set of the maps in xrel with the corresponding values of ks.\n */\nclojure.set.index = (function clojure$set$index(xrel,ks){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (m,x){\nvar ik = cljs.core.select_keys(x,ks);\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m,ik,cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(m,ik,cljs.core.PersistentHashSet.EMPTY),x));\n}),cljs.core.PersistentArrayMap.EMPTY,xrel);\n});\n/**\n * Returns the map with the vals mapped to the keys.\n */\nclojure.set.map_invert = (function clojure$set$map_invert(m){\nreturn cljs.core.persistent_BANG_(cljs.core.reduce_kv((function (m__$1,k,v){\nreturn cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(m__$1,v,k);\n}),cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY),m));\n});\n/**\n * When passed 2 rels, returns the rel corresponding to the natural\n *   join. When passed an additional keymap, joins on the corresponding\n *   keys.\n */\nclojure.set.join = (function clojure$set$join(var_args){\nvar G__7908 = arguments.length;\nswitch (G__7908) {\ncase 2:\nreturn clojure.set.join.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn clojure.set.join.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(clojure.set.join.cljs$core$IFn$_invoke$arity$2 = (function (xrel,yrel){\nif(((cljs.core.seq(xrel)) && (cljs.core.seq(yrel)))){\nvar ks = clojure.set.intersection.cljs$core$IFn$_invoke$arity$2(cljs.core.set(cljs.core.keys(cljs.core.first(xrel))),cljs.core.set(cljs.core.keys(cljs.core.first(yrel))));\nvar vec__7909 = (((cljs.core.count(xrel) <= cljs.core.count(yrel)))?new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [xrel,yrel], null):new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [yrel,xrel], null));\nvar r = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__7909,(0),null);\nvar s = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__7909,(1),null);\nvar idx = clojure.set.index(r,ks);\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (ret,x){\nvar found = (function (){var G__7915 = cljs.core.select_keys(x,ks);\nreturn (idx.cljs$core$IFn$_invoke$arity$1 ? idx.cljs$core$IFn$_invoke$arity$1(G__7915) : idx.call(null,G__7915));\n})();\nif(cljs.core.truth_(found)){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (p1__7903_SHARP_,p2__7904_SHARP_){\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__7903_SHARP_,cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([p2__7904_SHARP_,x], 0)));\n}),ret,found);\n} else {\nreturn ret;\n}\n}),cljs.core.PersistentHashSet.EMPTY,s);\n} else {\nreturn cljs.core.PersistentHashSet.EMPTY;\n}\n}));\n\n(clojure.set.join.cljs$core$IFn$_invoke$arity$3 = (function (xrel,yrel,km){\nvar vec__7916 = (((cljs.core.count(xrel) <= cljs.core.count(yrel)))?new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [xrel,yrel,clojure.set.map_invert(km)], null):new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [yrel,xrel,km], null));\nvar r = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__7916,(0),null);\nvar s = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__7916,(1),null);\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__7916,(2),null);\nvar idx = clojure.set.index(r,cljs.core.vals(k));\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (ret,x){\nvar found = (function (){var G__7919 = clojure.set.rename_keys(cljs.core.select_keys(x,cljs.core.keys(k)),k);\nreturn (idx.cljs$core$IFn$_invoke$arity$1 ? idx.cljs$core$IFn$_invoke$arity$1(G__7919) : idx.call(null,G__7919));\n})();\nif(cljs.core.truth_(found)){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (p1__7905_SHARP_,p2__7906_SHARP_){\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__7905_SHARP_,cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([p2__7906_SHARP_,x], 0)));\n}),ret,found);\n} else {\nreturn ret;\n}\n}),cljs.core.PersistentHashSet.EMPTY,s);\n}));\n\n(clojure.set.join.cljs$lang$maxFixedArity = 3);\n\n/**\n * Is set1 a subset of set2?\n */\nclojure.set.subset_QMARK_ = (function clojure$set$subset_QMARK_(set1,set2){\nreturn (((cljs.core.count(set1) <= cljs.core.count(set2))) && (cljs.core.every_QMARK_((function (p1__7928_SHARP_){\nreturn cljs.core.contains_QMARK_(set2,p1__7928_SHARP_);\n}),set1)));\n});\n/**\n * Is set1 a superset of set2?\n */\nclojure.set.superset_QMARK_ = (function clojure$set$superset_QMARK_(set1,set2){\nreturn (((cljs.core.count(set1) >= cljs.core.count(set2))) && (cljs.core.every_QMARK_((function (p1__7952_SHARP_){\nreturn cljs.core.contains_QMARK_(set1,p1__7952_SHARP_);\n}),set2)));\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","clojure/set.cljs","~:line",11,"~:column",8,"~:end-line",11,"~:end-column",19,"~:doc","Set operations such as union/intersection.","~:author","Rich Hickey"],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$react-dom","~$module$node_modules$react_dom$index"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$clojure.set","~:reader-aliases",["^ "],"~:op","~:ns","~:imports",null,"~:requires",["^ ","~$cljs.core","^N","~$goog","^O"],"~:seen",["^F",[]],"~:uses",null,"~:require-macros",["^ ","^N","^N"],"~:form",["~#list",["~$ns","^H"]],"~:flags",["^ "],"~:js-deps",[],"~:deps",["^O","^N"]],"^K","^H","~:resource-id",["~:shadow.build.classpath/resource","clojure/set.cljs"],"~:compiled-at",1751714379547,"^I",["^ ","^N","^N","^O","^O"],"~:resource-name","clojure/set.cljs","~:warnings",[],"~:source",";   Copyright (c) Rich Hickey. All rights reserved.\n;   The use and distribution terms for this software are covered by the\n;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;   which can be found in the file epl-v10.html at the root of this distribution.\n;   By using this software in any fashion, you are agreeing to be bound by\n;   the terms of this license.\n;   You must not remove this notice, or any other, from this software.\n\n(ns ^{:doc \"Set operations such as union/intersection.\"\n       :author \"Rich Hickey\"}\n       clojure.set)\n\n(defn- bubble-max-key [k coll]\n  \"Move a maximal element of coll according to fn k (which returns a number) \n   to the front of coll.\"\n  (let [max (apply max-key k coll)]\n    (cons max (remove #(identical? max %) coll))))\n\n(defn union\n  \"Return a set that is the union of the input sets\"\n  ([] #{})\n  ([s1] s1)\n  ([s1 s2]\n     (if (< (count s1) (count s2))\n       (reduce conj s2 s1)\n       (reduce conj s1 s2)))\n  ([s1 s2 & sets]\n     (let [bubbled-sets (bubble-max-key count (conj sets s2 s1))]\n       (reduce into (first bubbled-sets) (rest bubbled-sets)))))\n\n(defn intersection\n  \"Return a set that is the intersection of the input sets\"\n  ([s1] s1)\n  ([s1 s2]\n     (if (< (count s2) (count s1))\n       (recur s2 s1)\n       (reduce (fn [result item]\n                   (if (contains? s2 item)\n\t\t     result\n                     (disj result item)))\n\t       s1 s1)))\n  ([s1 s2 & sets] \n     (let [bubbled-sets (bubble-max-key #(- (count %)) (conj sets s2 s1))]\n       (reduce intersection (first bubbled-sets) (rest bubbled-sets)))))\n\n(defn difference\n  \"Return a set that is the first set without elements of the remaining sets\"\n  ([s1] s1)\n  ([s1 s2] \n     (if (< (count s1) (count s2))\n       (reduce (fn [result item] \n                   (if (contains? s2 item) \n                     (disj result item) \n                     result))\n               s1 s1)\n       (reduce disj s1 s2)))\n  ([s1 s2 & sets] \n     (reduce difference s1 (conj sets s2))))\n\n\n(defn select\n  \"Returns a set of the elements for which pred is true\"\n  [pred xset]\n    (reduce (fn [s k] (if (pred k) s (disj s k)))\n            xset xset))\n\n(defn project\n  \"Returns a rel of the elements of xrel with only the keys in ks\"\n  [xrel ks]\n    (set (map #(select-keys % ks) xrel)))\n\n(defn rename-keys\n  \"Returns the map with the keys in kmap renamed to the vals in kmap\"\n  [map kmap]\n    (reduce\n     (fn [m [old new]]\n       (if (contains? map old)\n         (assoc m new (get map old))\n         m))\n     (apply dissoc map (keys kmap)) kmap))\n\n(defn rename\n  \"Returns a rel of the maps in xrel with the keys in kmap renamed to the vals in kmap\"\n  [xrel kmap]\n    (set (map #(rename-keys % kmap) xrel)))\n\n(defn index\n  \"Returns a map of the distinct values of ks in the xrel mapped to a\n  set of the maps in xrel with the corresponding values of ks.\"\n  [xrel ks]\n    (reduce\n     (fn [m x]\n       (let [ik (select-keys x ks)]\n         (assoc m ik (conj (get m ik #{}) x))))\n     {} xrel))\n   \n(defn map-invert\n  \"Returns the map with the vals mapped to the keys.\"\n  [m]\n  (persistent!\n    (reduce-kv (fn [m k v] (assoc! m v k))\n      (transient {})\n      m)))\n\n(defn join\n  \"When passed 2 rels, returns the rel corresponding to the natural\n  join. When passed an additional keymap, joins on the corresponding\n  keys.\"\n  ([xrel yrel] ;natural join\n   (if (and (seq xrel) (seq yrel))\n     (let [ks (intersection (set (keys (first xrel))) (set (keys (first yrel))))\n           [r s] (if (<= (count xrel) (count yrel))\n                   [xrel yrel]\n                   [yrel xrel])\n           idx (index r ks)]\n       (reduce (fn [ret x]\n                 (let [found (idx (select-keys x ks))]\n                   (if found\n                     (reduce #(conj %1 (merge %2 x)) ret found)\n                     ret)))\n               #{} s))\n     #{}))\n  ([xrel yrel km] ;arbitrary key mapping\n   (let [[r s k] (if (<= (count xrel) (count yrel))\n                   [xrel yrel (map-invert km)]\n                   [yrel xrel km])\n         idx (index r (vals k))]\n     (reduce (fn [ret x]\n               (let [found (idx (rename-keys (select-keys x (keys k)) k))]\n                 (if found\n                   (reduce #(conj %1 (merge %2 x)) ret found)\n                   ret)))\n             #{} s))))\n\n(defn subset? \n  \"Is set1 a subset of set2?\"\n  [set1 set2]\n  (and (<= (count set1) (count set2))\n       (every? #(contains? set2 %) set1)))\n\n(defn superset? \n  \"Is set1 a superset of set2?\"\n  [set1 set2]\n  (and (>= (count set1) (count set2))\n       (every? #(contains? set1 %) set2)))\n\n(comment\n(refer 'set)\n(def xs #{{:a 11 :b 1 :c 1 :d 4}\n         {:a 2 :b 12 :c 2 :d 6}\n         {:a 3 :b 3 :c 3 :d 8 :f 42}})\n\n(def ys #{{:a 11 :b 11 :c 11 :e 5}\n         {:a 12 :b 11 :c 12 :e 3}\n         {:a 3 :b 3 :c 3 :e 7 }})\n\n(join xs ys)\n(join xs (rename ys {:b :yb :c :yc}) {:a :a})\n\n(union #{:a :b :c} #{:c :d :e })\n(difference #{:a :b :c} #{:c :d :e})\n(intersection #{:a :b :c} #{:c :d :e})\n\n(index ys [:b]))\n\n","~:reader-features",["^F",["~:cljs"]],"~:used-var-namespaces",["^F",["^N","~$js","^H"]],"~:cljc",false,"~:source-map-compact",["^ ","mappings","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","names",["clojure.set/bubble-max-key","k","coll","max","cljs.core.apply","cljs.core/max-key","cljs.core/cons","p1__7860#","cljs.core.remove","var_args","G__7865","clojure.set/union","args-arr__5774__auto__","len__5749__auto__","i__5750__auto__","argseq__5775__auto__","cljs.core/IndexedSeq","seq7862","G__7863","cljs.core/first","cljs.core/next","G__7864","self__5734__auto__","s1","s2","cljs.core/count","cljs.core.reduce","cljs.core/conj","sets","bubbled-sets","cljs.core.conj","cljs.core/into","cljs.core/rest","G__7871","clojure.set/intersection","seq7868","G__7869","G__7870","result","item","cljs.core/contains?","cljs.core.disj","p1__7866#","G__7882","clojure.set/difference","seq7878","G__7879","G__7880","cljs.core/disj","clojure.set/select","pred","xset","s","clojure.set/project","xrel","ks","cljs.core/set","p1__7885#","cljs.core.map","cljs.core/select-keys","clojure.set/rename-keys","map","kmap","p__7886","vec__7887","cljs.core.nth","m","old","new","cljs.core.assoc","cljs.core.get","cljs.core/dissoc","cljs.core/keys","clojure.set/rename","p1__7890#","clojure.set/index","x","ik","clojure.set/map-invert","cljs.core/persistent!","cljs.core/reduce-kv","v","cljs.core.assoc_BANG_","cljs.core/transient","G__7908","clojure.set/join","js/Error","yrel","cljs.core/seq","vec__7909","clojure.set.intersection","r","idx","ret","found","G__7915","p1__7903#","p2__7904#","cljs.core.merge","km","vec__7916","cljs.core/vals","G__7919","p1__7905#","p2__7906#","clojure.set/subset?","set1","set2","p1__7928#","cljs.core/every?","clojure.set/superset?","p1__7952#"]],"~:used-vars",["^F",["~$cljs.core/rest","~$clojure.set/intersection","~$clojure.set/project","~$clojure.set/index","~$cljs.core/keys","~$clojure.set/bubble-max-key","~$cljs.core/IndexedSeq","~$cljs.core/count","~$cljs.core/reduce","~$cljs.core/seq","~$cljs.core/apply","~$cljs.core/dissoc","~$cljs.core/max-key","~$cljs.core/set","~$cljs.core/contains?","~$cljs.core/into","~$cljs.core/conj","~$cljs.core/map","~$clojure.set/rename-keys","~$cljs.core/vals","~$cljs.core/get","~$cljs.core/remove","~$clojure.set/difference","~$clojure.set/superset?","~$cljs.core/persistent!","~$cljs.core/nth","~$clojure.set/subset?","~$cljs.core/next","~$cljs.core/select-keys","~$cljs.core/transient","~$cljs.core/disj","~$cljs.core/cons","~$cljs.core/assoc","~$clojure.set/union","~$cljs.core/reduce-kv","~$clojure.set/rename","~$clojure.set/map-invert","~$cljs.core/first","~$cljs.core/assoc!","~$clojure.set/join","~$cljs.core/merge","~$cljs.core/every?","~$clojure.set/select","~$js/Error"]]],"~:cache-keys",["~#cmap",[["^Z","goog/dom/tagname.js"],["5894b81ddad9694d9b92153e1834889eb8533444","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^F",[]],"~:deps-syms",["^O","~$goog.dom.HtmlElement"]]],["^Z","goog/html/trustedtypes.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^2>",["^ ","^2?",null,"^2@",["^F",[]],"^2A",["^O"]]],["^Z","goog/labs/useragent/browser.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^2>",["^ ","^2?",null,"^2@",["^F",[]],"^2A",["^O","~$goog.labs.userAgent.util","~$goog.labs.userAgent.highEntropy.highEntropyValue","~$goog.labs.userAgent.chromiumRebrands","~$goog.asserts","~$goog.string.internal","~$goog.labs.userAgent.highEntropy.highEntropyData","~$goog.labs.userAgent"]]],["^Z","goog/html/safeurl.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^2>",["^ ","^2?",null,"^2@",["^F",[]],"^2A",["^O","^2F","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.string.Const","~$goog.string.TypedString","^2G"]]],["^Z","goog/array/array.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^2>",["^ ","^2?",null,"^2@",["^F",[]],"^2A",["^O","^2F"]]],["^Z","goog/debug/error.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^2>",["^ ","^2?",null,"^2@",["^F",[]],"^2A",["^O"]]],["^Z","goog/flags/flags.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^2>",["^ ","^2?",null,"^2@",["^F",[]],"^2A",["^O"]]],["^Z","goog/dom/nodetype.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^2>",["^ ","^2?",null,"^2@",["^F",[]],"^2A",["^O"]]],["^Z","goog/labs/useragent/highentropy/highentropyvalue.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^2>",["^ ","^2?",null,"^2@",["^F",[]],"^2A",["^O","^2C","^2G"]]],["^Z","goog/string/typedstring.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^2>",["^ ","^2?",null,"^2@",["^F",[]],"^2A",["^O"]]],["^Z","goog/object/object.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^2>",["^ ","^2?",null,"^2@",["^F",[]],"^2A",["^O"]]],["^Z","goog/dom/asserts.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^2>",["^ ","^2?",null,"^2@",["^F",[]],"^2A",["^O","^2F"]]],"~:SHADOW-TIMESTAMP",[1750727304000,1750727304000,1749764704000],["^Z","goog/math/long.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^2>",["^ ","^2?",null,"^2@",["^F",[]],"^2A",["^O","^2F","~$goog.reflect"]]],["^Z","goog/html/trustedresourceurl.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^2>",["^ ","^2?",null,"^2@",["^F",[]],"^2A",["^O","^2F","~$goog.fs.blob","^2J","~$goog.html.SafeScript","~$goog.html.trustedtypes","^2L","^2M"]]],["^Z","goog/string/internal.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^2>",["^ ","^2?",null,"^2@",["^F",[]],"^2A",["^O"]]],["^Z","goog/functions/functions.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^2>",["^ ","^2?",null,"^2@",["^F",[]],"^2A",["^O"]]],["^Z","goog/html/safestyle.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^2>",["^ ","^2?",null,"^2@",["^F",[]],"^2A",["^O","^2L","~$goog.html.SafeUrl","^2M","^2F","^2G"]]],["^Z","goog/dom/safe.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^2>",["^ ","^2?",null,"^2@",["^F",[]],"^2A",["^O","^2F","~$goog.asserts.dom","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^2Q","~$goog.html.SafeStyle","^2S","^2K","~$goog.html.uncheckedconversions","^2L","^2G"]]],["^Z","goog/asserts/dom.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^2>",["^ ","^2?",null,"^2@",["^F",[]],"^2A",["^O","~$goog.dom.TagName","^2F","~$goog.dom.element"]]],["^Z","goog/html/safehtml.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^2>",["^ ","^2?",null,"^2@",["^F",[]],"^2A",["^O","^2L","^2Q","^2X","~$goog.html.SafeStyleSheet","^2S","^2Z","^2K","^2M","^2F","~$goog.labs.userAgent.browser","~$goog.array","~$goog.object","^2G","~$goog.dom.tags","^2R"]]],["^Z","goog/dom/tags.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^2>",["^ ","^2?",null,"^2@",["^F",[]],"^2A",["^O","^33"]]],["^Z","goog/fs/blob.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^2>",["^ ","^2?",null,"^2@",["^F",[]],"^2A",["^O"]]],["^Z","goog/asserts/asserts.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^2>",["^ ","^2?",null,"^2@",["^F",[]],"^2A",["^O","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^Z","goog/uri/uri.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^2>",["^ ","^2?",null,"^2@",["^F",[]],"^2A",["^O","^32","^2F","~$goog.collections.maps","~$goog.string","~$goog.structs","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^Z","goog/labs/useragent/highentropy/highentropydata.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^2>",["^ ","^2?",null,"^2@",["^F",[]],"^2A",["^O","^2D"]]],["^Z","goog/collections/maps.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^2>",["^ ","^2?",null,"^2@",["^F",[]],"^2A",["^O"]]],["^Z","goog/fs/url.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^2>",["^ ","^2?",null,"^2@",["^F",[]],"^2A",["^O"]]],["^Z","goog/base.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^2>",["^ ","^2?",null,"^2@",["^F",[]],"^2A",[]]],["^Z","goog/structs/structs.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^2>",["^ ","^2?",null,"^2@",["^F",[]],"^2A",["^O","^32","^33"]]],["^Z","goog/string/string.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^2>",["^ ","^2?",null,"^2@",["^F",[]],"^2A",["^O","~$goog.dom.safe","^2Y","^2L","^2G"]]],["^Z","goog/reflect/reflect.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^2>",["^ ","^2?",null,"^2@",["^F",[]],"^2A",["^O"]]],["^Z","goog/labs/useragent/util.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^2>",["^ ","^2?",null,"^2@",["^F",[]],"^2A",["^O","^2G","^2I"]]],["^Z","goog/string/stringbuffer.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^2>",["^ ","^2?",null,"^2@",["^F",[]],"^2A",["^O"]]],["^Z","goog/labs/useragent/chromium_rebrands.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^2>",["^ ","^2?",null,"^2@",["^F",[]],"^2A",["^O"]]],["^Z","goog/labs/useragent/useragent.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^2>",["^ ","^2?",null,"^2@",["^F",[]],"^2A",["^O","~$goog.flags"]]],["^Z","goog/dom/element.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^2>",["^ ","^2?",null,"^2@",["^F",[]],"^2A",["^O","^36","^2Z"]]],["^Z","goog/html/uncheckedconversions.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^2>",["^ ","^2?",null,"^2@",["^F",[]],"^2A",["^O","^2F","^2W","^2Q","^2X","^30","^2S","^2K","^2L","^2G"]]],["^Z","goog/dom/htmlelement.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^2>",["^ ","^2?",null,"^2@",["^F",[]],"^2A",["^O"]]],["^Z","cljs/core.cljs"],["29b0d50db86dc25d9e60d7c39586a3f5dfbf4c5b","^2>",["^ ","^2?",null,"^2@",["^F",[]],"^2A",["^O","~$goog.math.Long","~$goog.math.Integer","^38","^33","^32","~$goog.Uri","~$goog.string.StringBuffer"]]],["^Z","goog/html/safescript.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^2>",["^ ","^2?",null,"^2@",["^F",[]],"^2A",["^O","^2L","^2M","^2R","^2F"]]],["^Z","goog/html/safestylesheet.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^2>",["^ ","^2?",null,"^2@",["^F",[]],"^2A",["^O","^2L","^2X","^2M","^33","^2F","^2G"]]],["^Z","goog/math/integer.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^2>",["^ ","^2?",null,"^2@",["^F",[]],"^2A",["^O","^2O"]]],["^Z","clojure/set.cljs"],["29b0d50db86dc25d9e60d7c39586a3f5dfbf4c5b","^2>",["^ ","^2?",null,"^2@",["^F",[]],"^2A",["^O","^N"]]],["^Z","goog/uri/utils.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^2>",["^ ","^2?",null,"^2@",["^F",[]],"^2A",["^O","^2F","^38"]]],["^Z","goog/string/const.js"],["5894b81ddad9694d9b92153e1834889eb8533444","^2>",["^ ","^2?",null,"^2@",["^F",[]],"^2A",["^O","^2F","^2M"]]]]],"~:clj-info",["^ ","jar:file:/home/uprootiny/.m2/repository/org/clojure/clojure/1.12.0/clojure-1.12.0.jar!/clojure/instant.clj",1738717120000,"jar:file:/home/uprootiny/.m2/repository/org/clojure/clojurescript/1.12.42/clojurescript-1.12.42.jar!/cljs/analyzer.cljc",1749764704000,"jar:file:/home/uprootiny/.m2/repository/org/clojure/clojurescript/1.12.42/clojurescript-1.12.42.jar!/cljs/vendor/clojure/data/json.clj",1749764704000,"jar:file:/home/uprootiny/.m2/repository/org/clojure/clojurescript/1.12.42/clojurescript-1.12.42.jar!/cljs/source_map/base64.clj",1749764704000,"jar:file:/home/uprootiny/.m2/repository/org/clojure/clojurescript/1.12.42/clojurescript-1.12.42.jar!/cljs/vendor/clojure/tools/reader/impl/inspect.clj",1749764704000,"jar:file:/home/uprootiny/.m2/repository/org/clojure/clojure/1.12.0/clojure-1.12.0.jar!/clojure/set.clj",1738717120000,"jar:file:/home/uprootiny/.m2/repository/org/clojure/clojurescript/1.12.42/clojurescript-1.12.42.jar!/cljs/analyzer/impl/namespaces.cljc",1749764704000,"jar:file:/home/uprootiny/.m2/repository/org/clojure/clojurescript/1.12.42/clojurescript-1.12.42.jar!/cljs/instant.clj",1749764704000,"jar:file:/home/uprootiny/.m2/repository/org/clojure/clojurescript/1.12.42/clojurescript-1.12.42.jar!/cljs/analyzer/passes.cljc",1749764704000,"jar:file:/home/uprootiny/.m2/repository/org/clojure/clojure/1.12.0/clojure-1.12.0.jar!/clojure/java/io.clj",1738717120000,"jar:file:/home/uprootiny/.m2/repository/org/clojure/clojure/1.12.0/clojure-1.12.0.jar!/clojure/pprint.clj",1738717120000,"jar:file:/home/uprootiny/.m2/repository/org/clojure/clojurescript/1.12.42/clojurescript-1.12.42.jar!/cljs/analyzer/passes/and_or.cljc",1749764704000,"jar:file:/home/uprootiny/.m2/repository/org/clojure/clojurescript/1.12.42/clojurescript-1.12.42.jar!/cljs/js_deps.cljc",1749764704000,"jar:file:/home/uprootiny/.m2/repository/org/clojure/clojurescript/1.12.42/clojurescript-1.12.42.jar!/cljs/env.cljc",1749764704000,"jar:file:/home/uprootiny/.m2/repository/org/clojure/clojurescript/1.12.42/clojurescript-1.12.42.jar!/cljs/vendor/clojure/tools/reader/default_data_readers.clj",1749764704000,"jar:file:/home/uprootiny/.m2/repository/org/clojure/clojurescript/1.12.42/clojurescript-1.12.42.jar!/cljs/util.cljc",1749764704000,"jar:file:/home/uprootiny/.m2/repository/org/clojure/clojure/1.12.0/clojure-1.12.0.jar!/clojure/core.clj",1738717120000,"jar:file:/home/uprootiny/.m2/repository/org/clojure/clojure/1.12.0/clojure-1.12.0.jar!/clojure/string.clj",1738717120000,"jar:file:/home/uprootiny/.m2/repository/org/clojure/clojurescript/1.12.42/clojurescript-1.12.42.jar!/cljs/source_map/base64_vlq.clj",1749764704000,"jar:file:/home/uprootiny/.m2/repository/org/clojure/clojurescript/1.12.42/clojurescript-1.12.42.jar!/cljs/tagged_literals.cljc",1749764704000,"jar:file:/home/uprootiny/.m2/repository/org/clojure/clojurescript/1.12.42/clojurescript-1.12.42.jar!/cljs/vendor/clojure/tools/reader/reader_types.clj",1749764704000,"jar:file:/home/uprootiny/.m2/repository/org/clojure/clojurescript/1.12.42/clojurescript-1.12.42.jar!/cljs/core.cljc",1749764704000,"jar:file:/home/uprootiny/.m2/repository/org/clojure/clojurescript/1.12.42/clojurescript-1.12.42.jar!/cljs/source_map.clj",1749764704000,"jar:file:/home/uprootiny/.m2/repository/org/clojure/clojurescript/1.12.42/clojurescript-1.12.42.jar!/cljs/vendor/clojure/tools/reader.clj",1749764704000,"jar:file:/home/uprootiny/.m2/repository/org/clojure/clojurescript/1.12.42/clojurescript-1.12.42.jar!/cljs/externs.clj",1749764704000,"jar:file:/home/uprootiny/.m2/repository/org/clojure/clojurescript/1.12.42/clojurescript-1.12.42.jar!/cljs/vendor/clojure/tools/reader/impl/errors.clj",1749764704000,"jar:file:/home/uprootiny/.m2/repository/org/clojure/clojure/1.12.0/clojure-1.12.0.jar!/clojure/edn.clj",1738717120000,"jar:file:/home/uprootiny/.m2/repository/org/clojure/clojurescript/1.12.42/clojurescript-1.12.42.jar!/cljs/compiler.cljc",1749764704000,"jar:file:/home/uprootiny/.m2/repository/org/clojure/clojurescript/1.12.42/clojurescript-1.12.42.jar!/cljs/analyzer/impl.cljc",1749764704000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","clojure/set.cljs","^7",11,"^8",8,"^9",11,"^:",19,"^;","Set operations such as union/intersection.","^<","Rich Hickey"],"^=",["^ ","^>","^?","^@","^A","^B","^C"],"^D",null,"^E",["^F",[]],"^G","^H","^I",["^ "],"^L",null,"^M",["^ ","^N","^N","^O","^O"],"^P",["^F",[]],"~:shadow/js-access-global",["^F",["Error"]],"^Q",null,"~:defs",["^ ","~$union",["^ ","~:protocol-inline",null,"^5",["^ ","^6","clojure/set.cljs","^7",19,"^8",7,"^9",19,"^:",12,"~:arglists",["^T",["~$quote",["^T",[[],["~$s1"],["^4<","~$s2"],["^4<","^4=","~$&","~$sets"]]]]],"^;","Return a set that is the union of the input sets","~:top-fn",["^ ","~:variadic?",true,"~:fixed-arity",2,"~:max-fixed-arity",2,"~:method-params",[[],["^4<"],["^4<","^4="]],"^4:",["^T",[[],["^4<"],["^4<","^4="],["^4<","^4=","~$&","^4>"]]],"~:arglists-meta",["^T",[null,null,null,null]]]],"^G","^21","^6","clojure/set.cljs","^:",12,"^4?",["^ ","^4@",true,"^4A",2,"^4B",2,"^4C",[[],["^4<"],["^4<","^4="]],"^4:",["^T",[[],["^4<"],["^4<","^4="],["^4<","^4=","~$&","^4>"]]],"^4D",["^T",[null,null,null,null]]],"^4C",[[],["^4<"],["^4<","^4="]],"~:protocol-impl",null,"^4A",2,"^4D",["^T",[null,null,null,null]],"^8",1,"^4@",true,"~:methods",[["^ ","^4A",0,"^4@",false,"~:tag","~$cljs.core/ISet"],["^ ","^4A",1,"^4@",false],["^ ","^4A",2,"^4@",false,"^4G",["^F",[null,"~$any"]]],["^ ","^4A",2,"^4@",true,"^4G",["^F",[null,"^4I"]]]],"^7",19,"^9",19,"^4B",2,"~:fn-var",true,"^4:",["^T",[[],["^4<"],["^4<","^4="],["^4<","^4=","~$&","^4>"]]],"^;","Return a set that is the union of the input sets"],"~$map-invert",["^ ","^49",null,"^5",["^ ","^6","clojure/set.cljs","^7",97,"^8",7,"^9",97,"^:",17,"^4:",["^T",["^4;",["^T",[["~$m"]]]]],"^;","Returns the map with the vals mapped to the keys."],"^G","^24","^6","clojure/set.cljs","^:",17,"^4C",["^T",[["~$m"]]],"^4E",null,"^4D",["^T",[null,null]],"^8",1,"^4@",false,"^7",97,"~:ret-tag","~$clj","^9",97,"^4B",1,"^4J",true,"^4:",["^T",["^4;",["^T",[["~$m"]]]]],"^;","Returns the map with the vals mapped to the keys."],"~$join",["^ ","^49",null,"^5",["^ ","^6","clojure/set.cljs","^7",105,"^8",7,"^9",105,"^:",11,"^4:",["^T",["^4;",["^T",[["~$xrel","~$yrel"],["^4O","^4P","~$km"]]]]],"^;","When passed 2 rels, returns the rel corresponding to the natural\n  join. When passed an additional keymap, joins on the corresponding\n  keys.","^4?",["^ ","^4@",false,"^4A",3,"^4B",3,"^4C",[["^4O","^4P"],["^4O","^4P","^4Q"]],"^4:",["^T",[["^4O","^4P"],["^4O","^4P","^4Q"]]],"^4D",["^T",[null,null]]]],"^G","^27","^6","clojure/set.cljs","^:",11,"^4?",["^ ","^4@",false,"^4A",3,"^4B",3,"^4C",[["^4O","^4P"],["^4O","^4P","^4Q"]],"^4:",["^T",[["^4O","^4P"],["^4O","^4P","^4Q"]]],"^4D",["^T",[null,null]]],"^4C",[["^4O","^4P"],["^4O","^4P","^4Q"]],"^4E",null,"^4A",3,"^4D",["^T",[null,null]],"^8",1,"^4@",false,"^4F",[["^ ","^4A",2,"^4@",false,"^4G",["^F",[null,"^4I","^4H"]]],["^ ","^4A",3,"^4@",false,"^4G",["^F",[null,"^4I"]]]],"^7",105,"^9",105,"^4B",3,"^4J",true,"^4:",["^T",[["^4O","^4P"],["^4O","^4P","^4Q"]]],"^;","When passed 2 rels, returns the rel corresponding to the natural\n  join. When passed an additional keymap, joins on the corresponding\n  keys."],"~$select",["^ ","^49",null,"^5",["^ ","^6","clojure/set.cljs","^7",61,"^8",7,"^9",61,"^:",13,"^4:",["^T",["^4;",["^T",[["~$pred","~$xset"]]]]],"^;","Returns a set of the elements for which pred is true"],"^G","^2:","^6","clojure/set.cljs","^:",13,"^4C",["^T",[["^4S","^4T"]]],"^4E",null,"^4D",["^T",[null,null]],"^8",1,"^4@",false,"^7",61,"^4L",["^F",[null,"^4I"]],"^9",61,"^4B",2,"^4J",true,"^4:",["^T",["^4;",["^T",[["^4S","^4T"]]]]],"^;","Returns a set of the elements for which pred is true"],"~$intersection",["^ ","^49",null,"^5",["^ ","^6","clojure/set.cljs","^7",31,"^8",7,"^9",31,"^:",19,"^4:",["^T",["^4;",["^T",[["^4<"],["^4<","^4="],["^4<","^4=","~$&","^4>"]]]]],"^;","Return a set that is the intersection of the input sets","^4?",["^ ","^4@",true,"^4A",2,"^4B",2,"^4C",[["^4<"],["^4<","^4="]],"^4:",["^T",[["^4<"],["^4<","^4="],["^4<","^4=","~$&","^4>"]]],"^4D",["^T",[null,null,null]]]],"^G","^1=","^6","clojure/set.cljs","^:",19,"^4?",["^ ","^4@",true,"^4A",2,"^4B",2,"^4C",[["^4<"],["^4<","^4="]],"^4:",["^T",[["^4<"],["^4<","^4="],["^4<","^4=","~$&","^4>"]]],"^4D",["^T",[null,null,null]]],"^4C",[["^4<"],["^4<","^4="]],"^4E",null,"^4A",2,"^4D",["^T",[null,null,null]],"^8",1,"^4@",true,"^4F",[["^ ","^4A",1,"^4@",false],["^ ","^4A",2,"^4@",false,"^4G",["^F",[null,"^4I"]]],["^ ","^4A",2,"^4@",true,"^4G",["^F",[null,"^4I"]]]],"^7",31,"^9",31,"^4B",2,"^4J",true,"^4:",["^T",[["^4<"],["^4<","^4="],["^4<","^4=","~$&","^4>"]]],"^;","Return a set that is the intersection of the input sets"],"~$superset?",["^ ","^49",null,"^5",["^ ","^6","clojure/set.cljs","^7",141,"^8",7,"^9",141,"^:",16,"^4:",["^T",["^4;",["^T",[["~$set1","~$set2"]]]]],"^;","Is set1 a superset of set2?"],"^G","^1S","^6","clojure/set.cljs","^:",16,"^4C",["^T",[["^4W","^4X"]]],"^4E",null,"^4D",["^T",[null,null]],"^8",1,"^4@",false,"^7",141,"^4L","~$boolean","^9",141,"^4B",2,"^4J",true,"^4:",["^T",["^4;",["^T",[["^4W","^4X"]]]]],"^;","Is set1 a superset of set2?"],"~$index",["^ ","^49",null,"^5",["^ ","^6","clojure/set.cljs","^7",87,"^8",7,"^9",87,"^:",12,"^4:",["^T",["^4;",["^T",[["^4O","~$ks"]]]]],"^;","Returns a map of the distinct values of ks in the xrel mapped to a\n  set of the maps in xrel with the corresponding values of ks."],"^G","^1?","^6","clojure/set.cljs","^:",12,"^4C",["^T",[["^4O","^4["]]],"^4E",null,"^4D",["^T",[null,null]],"^8",1,"^4@",false,"^7",87,"^4L",["^F",[null,"^4I"]],"^9",87,"^4B",2,"^4J",true,"^4:",["^T",["^4;",["^T",[["^4O","^4["]]]]],"^;","Returns a map of the distinct values of ks in the xrel mapped to a\n  set of the maps in xrel with the corresponding values of ks."],"~$bubble-max-key",["^ ","^49",null,"^5",["^ ","^6","clojure/set.cljs","^7",13,"^8",8,"^9",13,"^:",22,"~:private",true,"^4:",["^T",["^4;",["^T",[["~$k","~$coll"]]]]]],"^51",true,"^G","^1A","^6","clojure/set.cljs","^:",22,"^4C",["^T",[["~$k","^52"]]],"^4E",null,"^4D",["^T",[null,null]],"^8",1,"^4@",false,"^7",13,"^4L","^4M","^9",13,"^4B",2,"^4J",true,"^4:",["^T",["^4;",["^T",[["~$k","^52"]]]]]],"~$subset?",["^ ","^49",null,"^5",["^ ","^6","clojure/set.cljs","^7",135,"^8",7,"^9",135,"^:",14,"^4:",["^T",["^4;",["^T",[["^4W","^4X"]]]]],"^;","Is set1 a subset of set2?"],"^G","^1V","^6","clojure/set.cljs","^:",14,"^4C",["^T",[["^4W","^4X"]]],"^4E",null,"^4D",["^T",[null,null]],"^8",1,"^4@",false,"^7",135,"^4L","^4Y","^9",135,"^4B",2,"^4J",true,"^4:",["^T",["^4;",["^T",[["^4W","^4X"]]]]],"^;","Is set1 a subset of set2?"],"~$rename",["^ ","^49",null,"^5",["^ ","^6","clojure/set.cljs","^7",82,"^8",7,"^9",82,"^:",13,"^4:",["^T",["^4;",["^T",[["^4O","~$kmap"]]]]],"^;","Returns a rel of the maps in xrel with the keys in kmap renamed to the vals in kmap"],"^G","^23","^6","clojure/set.cljs","^:",13,"^4C",["^T",[["^4O","^55"]]],"^4E",null,"^4D",["^T",[null,null]],"^8",1,"^4@",false,"^7",82,"^4L",["^F",["^4M","^4I","^4H","~$cljs.core/MetaFn","~$clj-nil"]],"^9",82,"^4B",2,"^4J",true,"^4:",["^T",["^4;",["^T",[["^4O","^55"]]]]],"^;","Returns a rel of the maps in xrel with the keys in kmap renamed to the vals in kmap"],"~$rename-keys",["^ ","^49",null,"^5",["^ ","^6","clojure/set.cljs","^7",72,"^8",7,"^9",72,"^:",18,"^4:",["^T",["^4;",["^T",[["~$map","^55"]]]]],"^;","Returns the map with the keys in kmap renamed to the vals in kmap"],"^G","^1N","^6","clojure/set.cljs","^:",18,"^4C",["^T",[["^59","^55"]]],"^4E",null,"^4D",["^T",[null,null]],"^8",1,"^4@",false,"^7",72,"^4L",["^F",[null,"^4I"]],"^9",72,"^4B",2,"^4J",true,"^4:",["^T",["^4;",["^T",[["^59","^55"]]]]],"^;","Returns the map with the keys in kmap renamed to the vals in kmap"],"~$project",["^ ","^49",null,"^5",["^ ","^6","clojure/set.cljs","^7",67,"^8",7,"^9",67,"^:",14,"^4:",["^T",["^4;",["^T",[["^4O","^4["]]]]],"^;","Returns a rel of the elements of xrel with only the keys in ks"],"^G","^1>","^6","clojure/set.cljs","^:",14,"^4C",["^T",[["^4O","^4["]]],"^4E",null,"^4D",["^T",[null,null]],"^8",1,"^4@",false,"^7",67,"^4L",["^F",["^4M","^4I","^4H","^56","^57"]],"^9",67,"^4B",2,"^4J",true,"^4:",["^T",["^4;",["^T",[["^4O","^4["]]]]],"^;","Returns a rel of the elements of xrel with only the keys in ks"],"~$difference",["^ ","^49",null,"^5",["^ ","^6","clojure/set.cljs","^7",46,"^8",7,"^9",46,"^:",17,"^4:",["^T",["^4;",["^T",[["^4<"],["^4<","^4="],["^4<","^4=","~$&","^4>"]]]]],"^;","Return a set that is the first set without elements of the remaining sets","^4?",["^ ","^4@",true,"^4A",2,"^4B",2,"^4C",[["^4<"],["^4<","^4="]],"^4:",["^T",[["^4<"],["^4<","^4="],["^4<","^4=","~$&","^4>"]]],"^4D",["^T",[null,null,null]]]],"^G","^1R","^6","clojure/set.cljs","^:",17,"^4?",["^ ","^4@",true,"^4A",2,"^4B",2,"^4C",[["^4<"],["^4<","^4="]],"^4:",["^T",[["^4<"],["^4<","^4="],["^4<","^4=","~$&","^4>"]]],"^4D",["^T",[null,null,null]]],"^4C",[["^4<"],["^4<","^4="]],"^4E",null,"^4A",2,"^4D",["^T",[null,null,null]],"^8",1,"^4@",true,"^4F",[["^ ","^4A",1,"^4@",false],["^ ","^4A",2,"^4@",false,"^4G",["^F",[null,"^4I"]]],["^ ","^4A",2,"^4@",true,"^4G",["^F",[null,"^4I"]]]],"^7",46,"^9",46,"^4B",2,"^4J",true,"^4:",["^T",[["^4<"],["^4<","^4="],["^4<","^4=","~$&","^4>"]]],"^;","Return a set that is the first set without elements of the remaining sets"]],"^R",["^ ","^N","^N"],"^V",["^ "],"^W",[],"^X",["^O","^N"]],"^K","^H","~:ns-specs",["^ "],"~:ns-spec-vars",["^F",[]],"~:compiler-options",["^2=",[["^5>","~:static-fns"],true,["~:js-options","~:use-babel"],null,["^5>","~:shadow-tweaks"],null,["^5>","~:source-map-inline"],null,["^5>","~:shadow-optimize-constants"],null,["^5>","~:elide-asserts"],true,["^5>","~:optimize-constants"],null,["^5>","^11"],null,["^5>","~:external-config"],null,["^5>","~:tooling-config"],null,["^5>","~:emit-constants"],null,["^5>","~:load-tests"],false,["^5>","~:form-size-threshold"],null,["^5>","~:global-goog-object&array"],null,["^5>","~:data-readers"],null,["~:shadow.build/config","~:target"],"~:browser",["^5>","~:infer-externs"],"~:auto",["^5>","^13"],null,["^5@","~:js-provider"],"~:shadow",["~:mode"],"~:release",["^5>","~:fn-invoke-direct"],null,["^5>","~:source-map"],null]]]