["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/js-yaml/lib/snippet.js"],"~:js","shadow$provide[9]=function(P,ta,ka){function V(L,I,H,W,D){var F=\"\",U=\"\";D=Math.floor(D/2)-1;W-I>D&&(F=\" ... \",I=W-D+F.length);H-W>D&&(U=\" ...\",H=W+D-U.length);return{str:F+L.slice(I,H).replace(/\\t/g,\"→\")+U,pos:W-I+F.length}}function J(L,I){return N.repeat(\" \",I-L.length)+L}var N=P(7);ta.exports=function(L,I){I=Object.create(I||null);if(!L.buffer)return null;I.maxLength||(I.maxLength=79);typeof I.indent!==\"number\"&&(I.indent=1);typeof I.linesBefore!==\"number\"&&(I.linesBefore=3);typeof I.linesAfter!==\n\"number\"&&(I.linesAfter=2);for(var H=/\\r?\\n|\\r|\\0/g,W=[0],D=[],F,U=-1;F=H.exec(L.buffer);)D.push(F.index),W.push(F.index+F[0].length),L.position<=F.index&&U<0&&(U=W.length-2);U<0&&(U=W.length-1);H=\"\";var ha=Math.min(L.line+I.linesAfter,D.length).toString().length,za=I.maxLength-(I.indent+ha+3);for(F=1;F<=I.linesBefore&&!(U-F<0);F++){var Pa=V(L.buffer,W[U-F],D[U-F],L.position-(W[U]-W[U-F]),za);H=N.repeat(\" \",I.indent)+J((L.line-F+1).toString(),ha)+\" | \"+Pa.str+\"\\n\"+H}Pa=V(L.buffer,W[U],D[U],L.position,\nza);H+=N.repeat(\" \",I.indent)+J((L.line+1).toString(),ha)+\" | \"+Pa.str+\"\\n\";H+=N.repeat(\"-\",I.indent+ha+3+Pa.pos)+\"^\\n\";for(F=1;F<=I.linesAfter&&!(U+F>=D.length);F++)Pa=V(L.buffer,W[U+F],D[U+F],L.position-(W[U]-W[U+F]),za),H+=N.repeat(\" \",I.indent)+J((L.line+F+1).toString(),ha)+\" | \"+Pa.str+\"\\n\";return H.replace(/\\n$/,\"\")}}","~:source","shadow$provide[9] = function(require,module,exports) {\n'use strict';\n\n\nvar common = require('./common');\n\n\n// get snippet for a single line, respecting maxLength\nfunction getLine(buffer, lineStart, lineEnd, position, maxLineLength) {\n  var head = '';\n  var tail = '';\n  var maxHalfLength = Math.floor(maxLineLength / 2) - 1;\n\n  if (position - lineStart > maxHalfLength) {\n    head = ' ... ';\n    lineStart = position - maxHalfLength + head.length;\n  }\n\n  if (lineEnd - position > maxHalfLength) {\n    tail = ' ...';\n    lineEnd = position + maxHalfLength - tail.length;\n  }\n\n  return {\n    str: head + buffer.slice(lineStart, lineEnd).replace(/\\t/g, '→') + tail,\n    pos: position - lineStart + head.length // relative position\n  };\n}\n\n\nfunction padStart(string, max) {\n  return common.repeat(' ', max - string.length) + string;\n}\n\n\nfunction makeSnippet(mark, options) {\n  options = Object.create(options || null);\n\n  if (!mark.buffer) return null;\n\n  if (!options.maxLength) options.maxLength = 79;\n  if (typeof options.indent      !== 'number') options.indent      = 1;\n  if (typeof options.linesBefore !== 'number') options.linesBefore = 3;\n  if (typeof options.linesAfter  !== 'number') options.linesAfter  = 2;\n\n  var re = /\\r?\\n|\\r|\\0/g;\n  var lineStarts = [ 0 ];\n  var lineEnds = [];\n  var match;\n  var foundLineNo = -1;\n\n  while ((match = re.exec(mark.buffer))) {\n    lineEnds.push(match.index);\n    lineStarts.push(match.index + match[0].length);\n\n    if (mark.position <= match.index && foundLineNo < 0) {\n      foundLineNo = lineStarts.length - 2;\n    }\n  }\n\n  if (foundLineNo < 0) foundLineNo = lineStarts.length - 1;\n\n  var result = '', i, line;\n  var lineNoLength = Math.min(mark.line + options.linesAfter, lineEnds.length).toString().length;\n  var maxLineLength = options.maxLength - (options.indent + lineNoLength + 3);\n\n  for (i = 1; i <= options.linesBefore; i++) {\n    if (foundLineNo - i < 0) break;\n    line = getLine(\n      mark.buffer,\n      lineStarts[foundLineNo - i],\n      lineEnds[foundLineNo - i],\n      mark.position - (lineStarts[foundLineNo] - lineStarts[foundLineNo - i]),\n      maxLineLength\n    );\n    result = common.repeat(' ', options.indent) + padStart((mark.line - i + 1).toString(), lineNoLength) +\n      ' | ' + line.str + '\\n' + result;\n  }\n\n  line = getLine(mark.buffer, lineStarts[foundLineNo], lineEnds[foundLineNo], mark.position, maxLineLength);\n  result += common.repeat(' ', options.indent) + padStart((mark.line + 1).toString(), lineNoLength) +\n    ' | ' + line.str + '\\n';\n  result += common.repeat('-', options.indent + lineNoLength + 3 + line.pos) + '^' + '\\n';\n\n  for (i = 1; i <= options.linesAfter; i++) {\n    if (foundLineNo + i >= lineEnds.length) break;\n    line = getLine(\n      mark.buffer,\n      lineStarts[foundLineNo + i],\n      lineEnds[foundLineNo + i],\n      mark.position - (lineStarts[foundLineNo] - lineStarts[foundLineNo + i]),\n      maxLineLength\n    );\n    result += common.repeat(' ', options.indent) + padStart((mark.line + i + 1).toString(), lineNoLength) +\n      ' | ' + line.str + '\\n';\n  }\n\n  return result.replace(/\\n$/, '');\n}\n\n\nmodule.exports = makeSnippet;\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$js_yaml$lib$common","~$shadow.js"]],"~:properties",["^5",["pos","str","maxLength","indent","linesBefore","linesAfter"]],"~:compiled-at",1751714332106,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$js_yaml$lib$snippet.js\",\n\"lineCount\":3,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/js-yaml/lib/snippet.js\"],\n\"sourcesContent\":[\"shadow$provide[9] = function(require,module,exports) {\\n'use strict';\\n\\n\\nvar common = require('./common');\\n\\n\\n// get snippet for a single line, respecting maxLength\\nfunction getLine(buffer, lineStart, lineEnd, position, maxLineLength) {\\n  var head = '';\\n  var tail = '';\\n  var maxHalfLength = Math.floor(maxLineLength / 2) - 1;\\n\\n  if (position - lineStart > maxHalfLength) {\\n    head = ' ... ';\\n    lineStart = position - maxHalfLength + head.length;\\n  }\\n\\n  if (lineEnd - position > maxHalfLength) {\\n    tail = ' ...';\\n    lineEnd = position + maxHalfLength - tail.length;\\n  }\\n\\n  return {\\n    str: head + buffer.slice(lineStart, lineEnd).replace(/\\\\t/g, '\\u2192') + tail,\\n    pos: position - lineStart + head.length // relative position\\n  };\\n}\\n\\n\\nfunction padStart(string, max) {\\n  return common.repeat(' ', max - string.length) + string;\\n}\\n\\n\\nfunction makeSnippet(mark, options) {\\n  options = Object.create(options || null);\\n\\n  if (!mark.buffer) return null;\\n\\n  if (!options.maxLength) options.maxLength = 79;\\n  if (typeof options.indent      !== 'number') options.indent      = 1;\\n  if (typeof options.linesBefore !== 'number') options.linesBefore = 3;\\n  if (typeof options.linesAfter  !== 'number') options.linesAfter  = 2;\\n\\n  var re = /\\\\r?\\\\n|\\\\r|\\\\0/g;\\n  var lineStarts = [ 0 ];\\n  var lineEnds = [];\\n  var match;\\n  var foundLineNo = -1;\\n\\n  while ((match = re.exec(mark.buffer))) {\\n    lineEnds.push(match.index);\\n    lineStarts.push(match.index + match[0].length);\\n\\n    if (mark.position <= match.index && foundLineNo < 0) {\\n      foundLineNo = lineStarts.length - 2;\\n    }\\n  }\\n\\n  if (foundLineNo < 0) foundLineNo = lineStarts.length - 1;\\n\\n  var result = '', i, line;\\n  var lineNoLength = Math.min(mark.line + options.linesAfter, lineEnds.length).toString().length;\\n  var maxLineLength = options.maxLength - (options.indent + lineNoLength + 3);\\n\\n  for (i = 1; i <= options.linesBefore; i++) {\\n    if (foundLineNo - i < 0) break;\\n    line = getLine(\\n      mark.buffer,\\n      lineStarts[foundLineNo - i],\\n      lineEnds[foundLineNo - i],\\n      mark.position - (lineStarts[foundLineNo] - lineStarts[foundLineNo - i]),\\n      maxLineLength\\n    );\\n    result = common.repeat(' ', options.indent) + padStart((mark.line - i + 1).toString(), lineNoLength) +\\n      ' | ' + line.str + '\\\\n' + result;\\n  }\\n\\n  line = getLine(mark.buffer, lineStarts[foundLineNo], lineEnds[foundLineNo], mark.position, maxLineLength);\\n  result += common.repeat(' ', options.indent) + padStart((mark.line + 1).toString(), lineNoLength) +\\n    ' | ' + line.str + '\\\\n';\\n  result += common.repeat('-', options.indent + lineNoLength + 3 + line.pos) + '^' + '\\\\n';\\n\\n  for (i = 1; i <= options.linesAfter; i++) {\\n    if (foundLineNo + i >= lineEnds.length) break;\\n    line = getLine(\\n      mark.buffer,\\n      lineStarts[foundLineNo + i],\\n      lineEnds[foundLineNo + i],\\n      mark.position - (lineStarts[foundLineNo] - lineStarts[foundLineNo + i]),\\n      maxLineLength\\n    );\\n    result += common.repeat(' ', options.indent) + padStart((mark.line + i + 1).toString(), lineNoLength) +\\n      ' | ' + line.str + '\\\\n';\\n  }\\n\\n  return result.replace(/\\\\n$/, '');\\n}\\n\\n\\nmodule.exports = makeSnippet;\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"require\",\"module\",\"exports\",\"getLine\",\"buffer\",\"lineStart\",\"lineEnd\",\"position\",\"maxLineLength\",\"head\",\"tail\",\"maxHalfLength\",\"Math\",\"floor\",\"length\",\"str\",\"slice\",\"replace\",\"pos\",\"padStart\",\"string\",\"max\",\"common\",\"repeat\",\"makeSnippet\",\"mark\",\"options\",\"Object\",\"create\",\"maxLength\",\"indent\",\"linesBefore\",\"linesAfter\",\"re\",\"lineStarts\",\"lineEnds\",\"match\",\"foundLineNo\",\"exec\",\"push\",\"index\",\"result\",\"lineNoLength\",\"min\",\"line\",\"toString\",\"i\"]\n}\n"]