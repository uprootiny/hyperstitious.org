["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/js-yaml/lib/type/float.js"],"~:js","shadow$provide[19]=function(P,ta,ka){var V=P(7);P=P(10);var J=RegExp(\"^(?:[-+]?(?:[0-9][0-9_]*)(?:\\\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?|\\\\.[0-9_]+(?:[eE][-+]?[0-9]+)?|[-+]?\\\\.(?:inf|Inf|INF)|\\\\.(?:nan|NaN|NAN))$\"),N=/^[-+]?[0-9]+e/;ta.exports=new P(\"tag:yaml.org,2002:float\",{kind:\"scalar\",resolve:function(L){return L!==null&&J.test(L)&&L[L.length-1]!==\"_\"?!0:!1},construct:function(L){L=L.replace(/_/g,\"\").toLowerCase();var I=L[0]===\"-\"?-1:1;\"+-\".indexOf(L[0])>=0&&(L=L.slice(1));return L===\".inf\"?I===1?\nNumber.POSITIVE_INFINITY:Number.NEGATIVE_INFINITY:L===\".nan\"?NaN:I*parseFloat(L,10)},predicate:function(L){return Object.prototype.toString.call(L)===\"[object Number]\"&&(L%1!==0||V.isNegativeZero(L))},represent:function(L,I){if(isNaN(L))switch(I){case \"lowercase\":return\".nan\";case \"uppercase\":return\".NAN\";case \"camelcase\":return\".NaN\"}else if(Number.POSITIVE_INFINITY===L)switch(I){case \"lowercase\":return\".inf\";case \"uppercase\":return\".INF\";case \"camelcase\":return\".Inf\"}else if(Number.NEGATIVE_INFINITY===\nL)switch(I){case \"lowercase\":return\"-.inf\";case \"uppercase\":return\"-.INF\";case \"camelcase\":return\"-.Inf\"}else if(V.isNegativeZero(L))return\"-0.0\";L=L.toString(10);return N.test(L)?L.replace(\"e\",\".e\"):L},defaultStyle:\"lowercase\"})}","~:source","shadow$provide[19] = function(require,module,exports) {\n'use strict';\n\nvar common = require('../common');\nvar Type   = require('../type');\n\nvar YAML_FLOAT_PATTERN = new RegExp(\n  // 2.5e4, 2.5 and integers\n  '^(?:[-+]?(?:[0-9][0-9_]*)(?:\\\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?' +\n  // .2e4, .2\n  // special case, seems not from spec\n  '|\\\\.[0-9_]+(?:[eE][-+]?[0-9]+)?' +\n  // .inf\n  '|[-+]?\\\\.(?:inf|Inf|INF)' +\n  // .nan\n  '|\\\\.(?:nan|NaN|NAN))$');\n\nfunction resolveYamlFloat(data) {\n  if (data === null) return false;\n\n  if (!YAML_FLOAT_PATTERN.test(data) ||\n      // Quick hack to not allow integers end with `_`\n      // Probably should update regexp & check speed\n      data[data.length - 1] === '_') {\n    return false;\n  }\n\n  return true;\n}\n\nfunction constructYamlFloat(data) {\n  var value, sign;\n\n  value  = data.replace(/_/g, '').toLowerCase();\n  sign   = value[0] === '-' ? -1 : 1;\n\n  if ('+-'.indexOf(value[0]) >= 0) {\n    value = value.slice(1);\n  }\n\n  if (value === '.inf') {\n    return (sign === 1) ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY;\n\n  } else if (value === '.nan') {\n    return NaN;\n  }\n  return sign * parseFloat(value, 10);\n}\n\n\nvar SCIENTIFIC_WITHOUT_DOT = /^[-+]?[0-9]+e/;\n\nfunction representYamlFloat(object, style) {\n  var res;\n\n  if (isNaN(object)) {\n    switch (style) {\n      case 'lowercase': return '.nan';\n      case 'uppercase': return '.NAN';\n      case 'camelcase': return '.NaN';\n    }\n  } else if (Number.POSITIVE_INFINITY === object) {\n    switch (style) {\n      case 'lowercase': return '.inf';\n      case 'uppercase': return '.INF';\n      case 'camelcase': return '.Inf';\n    }\n  } else if (Number.NEGATIVE_INFINITY === object) {\n    switch (style) {\n      case 'lowercase': return '-.inf';\n      case 'uppercase': return '-.INF';\n      case 'camelcase': return '-.Inf';\n    }\n  } else if (common.isNegativeZero(object)) {\n    return '-0.0';\n  }\n\n  res = object.toString(10);\n\n  // JS stringifier can build scientific format without dots: 5e-100,\n  // while YAML requres dot: 5.e-100. Fix it with simple hack\n\n  return SCIENTIFIC_WITHOUT_DOT.test(res) ? res.replace('e', '.e') : res;\n}\n\nfunction isFloat(object) {\n  return (Object.prototype.toString.call(object) === '[object Number]') &&\n         (object % 1 !== 0 || common.isNegativeZero(object));\n}\n\nmodule.exports = new Type('tag:yaml.org,2002:float', {\n  kind: 'scalar',\n  resolve: resolveYamlFloat,\n  construct: constructYamlFloat,\n  predicate: isFloat,\n  represent: representYamlFloat,\n  defaultStyle: 'lowercase'\n});\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$js_yaml$lib$type","~$module$node_modules$js_yaml$lib$common","~$shadow.js"]],"~:properties",["^5",["resolve","construct","defaultStyle","kind","predicate","represent"]],"~:compiled-at",1751714332129,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$js_yaml$lib$type$float.js\",\n\"lineCount\":3,\n\"mappings\":\"AAAAA,cAAA,CAAe,EAAf,CAAA,CAAqB,QAAQ,CAACC,CAAD,CAASC,EAAT,CAAgBC,EAAhB,CAAyB,CAGtD,IAAIC,EAASH,CAAA,CAAQ,CAAR,CACTI,EAAAA,CAASJ,CAAA,CAAQ,EAAR,CAEb,KAAIK,EAAyBC,MAAJ,CAEvB,0IAFuB,CAAzB,CA4CIC,EAAyB,eAwC7BN,GAAOC,CAAAA,OAAP,CAAiB,IAAIE,CAAJ,CAAS,yBAAT,CAAoC,CACnDI,KAAM,QAD6C,CAEnDC,QA3EFC,QAAyB,CAACC,CAAD,CAAO,CAG9B,MAFIA,EAEJ,GAFa,IAEb,EAAKN,CAAmBO,CAAAA,IAAnB,CAAwBD,CAAxB,CAAL,EAGIA,CAAA,CAAKA,CAAKE,CAAAA,MAAV,CAAmB,CAAnB,CAHJ,GAG8B,GAH9B,CAOO,CAAA,CAPP,CAIS,CAAA,CAPqB,CAyEqB,CAGnDC,UA/DFC,QAA2B,CAACJ,CAAD,CAAO,CAGhCK,CAAA,CAASL,CAAKM,CAAAA,OAAL,CAAa,IAAb,CAAmB,EAAnB,CAAuBC,CAAAA,WAAvB,EACT,KAAAC,EAASH,CAAA,CAAM,CAAN,CAAA,GAAa,GAAb,CAAmB,CAAC,CAApB,CAAwB,CAE7B,KAAKI,CAAAA,OAAL,CAAaJ,CAAA,CAAM,CAAN,CAAb,CAAJ,EAA8B,CAA9B,GACEA,CADF,CACUA,CAAMK,CAAAA,KAAN,CAAY,CAAZ,CADV,CAIA,OAAIL,EAAJ,GAAc,MAAd,CACUG,CAAD,GAAU,CAAV;AAAeG,MAAOC,CAAAA,iBAAtB,CAA0CD,MAAOE,CAAAA,iBAD1D,CAGWR,CAAJ,GAAc,MAAd,CACES,GADF,CAGAN,CAHA,CAGOO,UAAA,CAAWV,CAAX,CAAkB,EAAlB,CAhBkB,CA4DmB,CAInDW,UATFC,QAAgB,CAACC,CAAD,CAAS,CACvB,MAAQC,OAAOC,CAAAA,SAAUC,CAAAA,QAASC,CAAAA,IAA1B,CAA+BJ,CAA/B,CAAR,GAAmD,iBAAnD,GACQA,CADR,CACiB,CADjB,GACuB,CADvB,EAC4B1B,CAAO+B,CAAAA,cAAP,CAAsBL,CAAtB,CAD5B,CADuB,CAK4B,CAKnDM,UA3CFC,QAA2B,CAACP,CAAD,CAASQ,CAAT,CAAgB,CAGzC,GAAIC,KAAA,CAAMT,CAAN,CAAJ,CACE,OAAQQ,CAAR,CAAA,CACE,KAAK,WAAL,CAAkB,MAAO,MACzB,MAAK,WAAL,CAAkB,MAAO,MACzB,MAAK,WAAL,CAAkB,MAAO,MAH3B,CADF,IAMO,IAAIf,MAAOC,CAAAA,iBAAX,GAAiCM,CAAjC,CACL,OAAQQ,CAAR,CAAA,CACE,KAAK,WAAL,CAAkB,MAAO,MACzB,MAAK,WAAL,CAAkB,MAAO,MACzB,MAAK,WAAL,CAAkB,MAAO,MAH3B,CADK,IAMA,IAAIf,MAAOE,CAAAA,iBAAX;AAAiCK,CAAjC,CACL,OAAQQ,CAAR,CAAA,CACE,KAAK,WAAL,CAAkB,MAAO,OACzB,MAAK,WAAL,CAAkB,MAAO,OACzB,MAAK,WAAL,CAAkB,MAAO,OAH3B,CADK,IAMA,IAAIlC,CAAO+B,CAAAA,cAAP,CAAsBL,CAAtB,CAAJ,CACL,MAAO,MAGTU,EAAA,CAAMV,CAAOG,CAAAA,QAAP,CAAgB,EAAhB,CAKN,OAAOzB,EAAuBK,CAAAA,IAAvB,CAA4B2B,CAA5B,CAAA,CAAmCA,CAAItB,CAAAA,OAAJ,CAAY,GAAZ,CAAiB,IAAjB,CAAnC,CAA4DsB,CA9B1B,CAsCU,CAMnDC,aAAc,WANqC,CAApC,CA1FqC;\",\n\"sources\":[\"node_modules/js-yaml/lib/type/float.js\"],\n\"sourcesContent\":[\"shadow$provide[19] = function(require,module,exports) {\\n'use strict';\\n\\nvar common = require('../common');\\nvar Type   = require('../type');\\n\\nvar YAML_FLOAT_PATTERN = new RegExp(\\n  // 2.5e4, 2.5 and integers\\n  '^(?:[-+]?(?:[0-9][0-9_]*)(?:\\\\\\\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?' +\\n  // .2e4, .2\\n  // special case, seems not from spec\\n  '|\\\\\\\\.[0-9_]+(?:[eE][-+]?[0-9]+)?' +\\n  // .inf\\n  '|[-+]?\\\\\\\\.(?:inf|Inf|INF)' +\\n  // .nan\\n  '|\\\\\\\\.(?:nan|NaN|NAN))$');\\n\\nfunction resolveYamlFloat(data) {\\n  if (data === null) return false;\\n\\n  if (!YAML_FLOAT_PATTERN.test(data) ||\\n      // Quick hack to not allow integers end with `_`\\n      // Probably should update regexp & check speed\\n      data[data.length - 1] === '_') {\\n    return false;\\n  }\\n\\n  return true;\\n}\\n\\nfunction constructYamlFloat(data) {\\n  var value, sign;\\n\\n  value  = data.replace(/_/g, '').toLowerCase();\\n  sign   = value[0] === '-' ? -1 : 1;\\n\\n  if ('+-'.indexOf(value[0]) >= 0) {\\n    value = value.slice(1);\\n  }\\n\\n  if (value === '.inf') {\\n    return (sign === 1) ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY;\\n\\n  } else if (value === '.nan') {\\n    return NaN;\\n  }\\n  return sign * parseFloat(value, 10);\\n}\\n\\n\\nvar SCIENTIFIC_WITHOUT_DOT = /^[-+]?[0-9]+e/;\\n\\nfunction representYamlFloat(object, style) {\\n  var res;\\n\\n  if (isNaN(object)) {\\n    switch (style) {\\n      case 'lowercase': return '.nan';\\n      case 'uppercase': return '.NAN';\\n      case 'camelcase': return '.NaN';\\n    }\\n  } else if (Number.POSITIVE_INFINITY === object) {\\n    switch (style) {\\n      case 'lowercase': return '.inf';\\n      case 'uppercase': return '.INF';\\n      case 'camelcase': return '.Inf';\\n    }\\n  } else if (Number.NEGATIVE_INFINITY === object) {\\n    switch (style) {\\n      case 'lowercase': return '-.inf';\\n      case 'uppercase': return '-.INF';\\n      case 'camelcase': return '-.Inf';\\n    }\\n  } else if (common.isNegativeZero(object)) {\\n    return '-0.0';\\n  }\\n\\n  res = object.toString(10);\\n\\n  // JS stringifier can build scientific format without dots: 5e-100,\\n  // while YAML requres dot: 5.e-100. Fix it with simple hack\\n\\n  return SCIENTIFIC_WITHOUT_DOT.test(res) ? res.replace('e', '.e') : res;\\n}\\n\\nfunction isFloat(object) {\\n  return (Object.prototype.toString.call(object) === '[object Number]') &&\\n         (object % 1 !== 0 || common.isNegativeZero(object));\\n}\\n\\nmodule.exports = new Type('tag:yaml.org,2002:float', {\\n  kind: 'scalar',\\n  resolve: resolveYamlFloat,\\n  construct: constructYamlFloat,\\n  predicate: isFloat,\\n  represent: representYamlFloat,\\n  defaultStyle: 'lowercase'\\n});\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"require\",\"module\",\"exports\",\"common\",\"Type\",\"YAML_FLOAT_PATTERN\",\"RegExp\",\"SCIENTIFIC_WITHOUT_DOT\",\"kind\",\"resolve\",\"resolveYamlFloat\",\"data\",\"test\",\"length\",\"construct\",\"constructYamlFloat\",\"value\",\"replace\",\"toLowerCase\",\"sign\",\"indexOf\",\"slice\",\"Number\",\"POSITIVE_INFINITY\",\"NEGATIVE_INFINITY\",\"NaN\",\"parseFloat\",\"predicate\",\"isFloat\",\"object\",\"Object\",\"prototype\",\"toString\",\"call\",\"isNegativeZero\",\"represent\",\"representYamlFloat\",\"style\",\"isNaN\",\"res\",\"defaultStyle\"]\n}\n"]